### debug.acd ########################################################
#
# This optional adv770 module can be included in the adv770.acd file
# anywhere between procs.acd and actions.acd -- placing it anywhere
# else may cause problems. The resulting executable will be marginally
# larger and will include wiz (or debug) mode commands. These can
# be listed using the standard VOCABULARY command. Use WIZARD ON
# and WIZARD OFF to activate or deactivate the wiz mode.
#
# If built with the debug.acd modlue, the game will be able to load
# save files generated by executables built without the module, but 
# not the other way around.
#
#=====================================================================
#
# Commands exclusive to the wiz mode
#
verb numbers
verb increment
verb decrement
verb !runout
#
#=====================================================================
#
var magick
flags variable
    glowing
    show.numbers
#
#=====================================================================
#
text YOU.GLOW
    [Your body is surrounded by a magical glow./The glow surrounding
    your body fades out.]

#
fragment cycle YOUR.MAGNIFICENCE
    Your [Mightiness/Wizardness/Magnificence/Puissance]
#
text STATE.IS.NOW
   The state of the {arg2} is now $. The description now reads:
#
text LOCATION.NUMBER

    I beg to report to {YOUR.MAGNIFICENCE} that this be location number $.

#
text NO.CAN.SET
    No can do! The state of {arg2} would become negative: $.
#
text VOCAB.WIZ
    Wizard (i.e. debug) commands:

   /   increment \<entity\>          - increment state value of object or location 
   /   decrement \<entity\>          - decrement state value of object or location 
   /   dump                        - dump values and bits
   /   fetch \<object\> (obtain)     - fetch the object from wherever
   /   find \<object\>               - go where the object is
   /   fly \<location\> (teleport)   - go to the named location
   /   glow                        - toggle magical illumination
   /   mutter                      - try for the next orc mutter
   /   next \[up/down]              - go to the next higher/lower location
   /   numbers                     - toggle reporting of location refnos
   /   runout                      - sets event clock to zero
#
text cycle TO.HEAR.IS.TO.OBEY
    To hear is to obey,[/ Oh/=/=] [{YOUR.MAGNIFICENCE}/Great Wizard/Mighty One/
    the Greatest of Wizards]!

#
text increment NO.DESTINATION
    [Yeah, OK, we can {arg1}. But y/Y]ou should also say *where* you want
    to {arg1}!
#
#=====================================================================
#
proc is.it.dark?
   ifflag magick, glowing
      flag status, light.here
   fin
#
#---------------------------------------------------------------------
#
proc change.state, delta
   local state
#
   ifeq status, 1
      flag status, pls.clarify
      quip could.you.clarify?
   fin
   ifflag arg2, object
      or
   ifflag arg2, place
      eval state, arg2
      add state, delta
      ifge state, 0
         deposit arg2, state
         say state.is.now, state
         quip arg2
      fin
      quip no.can.set, state
   fin
   quip hah!
#
#======================================================================
#
action close cave
   ifflag here, not.in.cave,
      and
   ifle stage, adventuring
      goto y2
      flag status, moved
   fin
   say to.hear.is.to.obey, 0
   ifeq stage, adventuring
      flag tusk, valued
      flag rug, valued
      itobj obj.ptr, valued
         flag obj.ptr, seen
         apport obj.ptr, house
      fin
      apport starstone, stupendous.view
      set stage, closing.soon
   otherwise
   ifeq stage, closing.soon
      call closing.time
   otherwise
   ifeq stage, exits.barred
      call close.the.cave
   otherwise
   ifeq stage, in.repository
      call mirror.jump
   otherwise
   ifeq stage, middle.of.nowhere
      call lets.go.back
   else
      quip nothing
   fin
   quit
#
#---------------------------------------------------------------------
#
action find
   ifhave arg2
      quip you.have.it, arg2
   fin
   ifat arg2
      quip you.are.there
   fin
   locate place.ptr, arg2
   move place.ptr
#
#---------------------------------------------------------------------
#
action runout
   set clock, 0
   smove here, ok!
#
#---------------------------------------------------------------------
#
action glow
   ifflag magick, glowing
      unflag magick, glowing
      say you.glow, 1
      call is.it.dark?
      ifflag status, light.here
         ifat plain.2
            call phog
            quip glow
         fin
      else
         call too.dark.for.safety, 1
      fin
   else      
      flag magick, glowing
      say you.glow, 0
      set glow, 0
      ifflag status, light.here
      else
         flag status, light.here
         ifnear owl
            call owl.flies.off
         fin
         call describe.here
      fin
   fin
   quit
#
#---------------------------------------------------------------------
#
action obtain
   ifeq status, 1
      flag status, pls.clarify
      quip could.you.clarify?
   fin
   ifeq status, 2
      ifflag arg2, object
         and
      ifflag arg2, portable
         get arg2
         flag arg2, seen
         ifflag arg2, unstable
            call unstable.pick.up
         fin
         quip you.do.it
      fin
   fin   
   quip hah!
#
#---------------------------------------------------------------------
#
action mutter
   set mutter.time, 0
   quit
#
#---------------------------------------------------------------------
#
action numbers
   ifflag magick, show.numbers
      unflag magick, show.numbers
   else
      flag magick, show.numbers
   fin
   flag status, moved
   quip to.hear.is.to.obey
#
#---------------------------------------------------------------------
#
action dump
   dump
   quit
#
#---------------------------------------------------------------------
#
action increment
   call change.state, 1
#
#---------------------------------------------------------------------
#
action decrement
   call change.state, -1
#
#---------------------------------------------------------------------
#
action thurb
   ifat ice.cave.30
   else
      smove ice.cave.30, foof
   fin
#
#---------------------------------------------------------------------
#
action vocabulary
   ifkey wizard
      quip vocab.wiz
   fin       
   ifeq status, 1
      or
   ifkey all
      say vocab.wiz
      set context, q.vocab.0
      quip more?
   fin
#
#---------------------------------------------------------------------
#
action fly
   ifeq status, 1
      quip no.destination
   fin
   ifkey catacombs
      lda arg2, catacombs.lobby
   fin
   ifflag arg2, place
      flag arg2, been.here
      smove arg2, foof
   fin
#
#=====================================================================
#
at nowhere
   ifgt stage, little.joke
      and
   ifkey basingstoke
      and
   ifeq escape, 0
      set escape, -1   
   fin
#
#=====================================================================
#
init
   randomise to.hear.is.to.obey, 0
#
#=====================================================================
#
repeat
   ifflag magick, show.numbers
      and
   ifflag status, moved
      say location.number, here
   fin
#
#####################################################################
